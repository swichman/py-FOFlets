#!/usr/bin/env python3

import numpy as np
import scipy.signal as signal
import scipy as sp
from pyFOFlet import FOFlet
#import matplotlib.pyplot as plt
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg

import sounddevice as sd
from scipy.io.wavfile import write

from PyQt5 import QtGui, QtCore, QtWidgets, uic
import sys

import threading

#############################################
# User Functions
#############################################
def foflet_str(_foflet1, _foflet2, _foflet3, _foflet4, _foflet5):
    pr_str = '''\n\n
====================================================
| FOFlet_1 || Fc: %7d  k1: %7.5f  BW: %7d
====================================================
| FOFlet_2 || Fc: %7d  k1: %7.5f  BW: %7d
====================================================
| FOFlet_3 || Fc: %7d  k1: %7.5f  BW: %7d
====================================================
| FOFlet_4 || Fc: %7d  k1: %7.5f  BW: %7d
====================================================
| FOFlet_5 || Fc: %7d  k1: %7.5f  BW: %7d
====================================================\n\n
''' % (_foflet1.Fc, _foflet1.k1, _foflet1.BW,
       _foflet2.Fc, _foflet2.k1, _foflet2.BW,
       _foflet3.Fc, _foflet3.k1, _foflet3.BW,
       _foflet4.Fc, _foflet4.k1, _foflet4.BW,
       _foflet5.Fc, _foflet5.k1, _foflet5.BW     )
    return pr_str

#############################################
#
# Declare the 5 foflets for the application
# globally so that all aspects of class and
# main can reach them
#
#############################################
Fs = 44100
foflet1 = FOFlet.FOFlet()
foflet2 = FOFlet.FOFlet()
foflet3 = FOFlet.FOFlet()
foflet4 = FOFlet.FOFlet()
foflet5 = FOFlet.FOFlet()

#############################################
#
# Set default formant parameters
# for to human speech
#
#############################################
foflet1.set_k1(.002)
foflet1.set_BW(70)
foflet2.set_k1(.0015)
foflet2.set_BW(45)
foflet3.set_k1(.0015)
foflet3.set_BW(80)
foflet4.set_k1(.003)
foflet4.set_BW(130)
foflet5.set_k1(.001)
foflet5.set_BW(150)

#############################################
#
# set samplerate for playback
# and create low pass filter
# to smooth impulses
#
#############################################
lpf = signal.firls(9, (0,.001,.002,.12,.15,1),(0,0,1,1,0,0))
sd.default.samplerate = Fs

#############################################
# QT Stuff
#############################################
class Ui(QtWidgets.QMainWindow):
    # Init the class, build the connections, etc
    def __init__(self):
        super(Ui, self).__init__()
        # load UI file
        uic.loadUi('./ui/MainWindow.ui', self)
        # create timer
        self.timeout = int(1000/self.Impulse_Slider.value())
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.generateFOFlets)
        self.timer.start(self.timeout)

        # Turn all dials to initialized Parameters
        # defined by default foflets.
        self.Volume_Slider.setValue(80)
        self.Impulse_Slider.setValue(120)
        self.f1_fc.setValue(foflet1.Fc)
        self.f1_k1.setValue(int(foflet1.k1 * 10000))
        self.f1_bw.setValue(foflet1.BW)
        self.f2_fc.setValue(foflet2.Fc)
        self.f2_k1.setValue(int(foflet2.k1 * 10000))
        self.f2_bw.setValue(foflet2.BW)
        self.f3_fc.setValue(foflet3.Fc)
        self.f3_k1.setValue(int(foflet3.k1 * 10000))
        self.f3_bw.setValue(foflet3.BW)
        self.f4_fc.setValue(foflet4.Fc)
        self.f4_k1.setValue(int(foflet4.k1 * 10000))
        self.f4_bw.setValue(foflet4.BW)
        self.f5_fc.setValue(foflet5.Fc)
        self.f5_k1.setValue(int(foflet5.k1 * 10000))
        self.f5_bw.setValue(foflet5.BW)

        # make buttons toggle
        self.main_enable_toggle.clicked.connect(self.toggle_main)
        self.f1_toggle.clicked.connect(self.toggle_f1)
        self.f2_toggle.clicked.connect(self.toggle_f2)
        self.f3_toggle.clicked.connect(self.toggle_f3)
        self.f4_toggle.clicked.connect(self.toggle_f4)
        self.f5_toggle.clicked.connect(self.toggle_f5)

        # get graphing in order
        self.temporalPlot.setYRange(-1.1, 1.1)

        self.show()

    #######################################
    #
    # Function to turn the main system
    # ON/OFF
    #
    #######################################
    def toggle_main(self):
        if self.main_enable_toggle.isChecked():
            self.main_enable_toggle.setStyleSheet("border-radius: 2px;background-color: #FF0000;")
            if self.f1_toggle.isChecked():
                self.f1_toggle.setStyleSheet("background-color: #FF0000;")
            if self.f2_toggle.isChecked():
                self.f2_toggle.setStyleSheet("background-color: #FF0000;")
            if self.f3_toggle.isChecked():
                self.f3_toggle.setStyleSheet("background-color: #FF0000;")
            if self.f4_toggle.isChecked():
                self.f4_toggle.setStyleSheet("background-color: #FF0000;")
            if self.f5_toggle.isChecked():
                self.f5_toggle.setStyleSheet("background-color: #FF0000;")
        else:
            self.main_enable_toggle.setStyleSheet("border-radius: 2px;background-color: #990000;")
            self.f1_toggle.setStyleSheet("background-color: #990000;")
            self.f2_toggle.setStyleSheet("background-color: #990000;")
            self.f3_toggle.setStyleSheet("background-color: #990000;")
            self.f4_toggle.setStyleSheet("background-color: #990000;")
            self.f5_toggle.setStyleSheet("background-color: #990000;")

    #######################################
    #
    # functions to toggle the various
    # FOFlets ON/OFF
    #
    #######################################
    def toggle_f1(self):
        if self.main_enable_toggle.isChecked() and self.f1_toggle.isChecked():
            self.f1_toggle.setStyleSheet("background-color: #FF0000;")
        if self.main_enable_toggle.isChecked() and not self.f1_toggle.isChecked():
            self.f1_toggle.setStyleSheet("background-color: #990000;")
    def toggle_f2(self):
        if self.main_enable_toggle.isChecked() and self.f2_toggle.isChecked():
            self.f2_toggle.setStyleSheet("background-color: #FF0000;")
        if self.main_enable_toggle.isChecked() and not self.f2_toggle.isChecked():
            self.f2_toggle.setStyleSheet("background-color: #990000;")
    def toggle_f3(self):
        if self.main_enable_toggle.isChecked() and self.f3_toggle.isChecked():
            self.f3_toggle.setStyleSheet("background-color: #FF0000;")
        if self.main_enable_toggle.isChecked() and not self.f3_toggle.isChecked():
            self.f3_toggle.setStyleSheet("background-color: #990000;")
    def toggle_f4(self):
        if self.main_enable_toggle.isChecked() and self.f4_toggle.isChecked():
            self.f4_toggle.setStyleSheet("background-color: #FF0000;")
        if self.main_enable_toggle.isChecked() and not self.f4_toggle.isChecked():
            self.f4_toggle.setStyleSheet("background-color: #990000;")
    def toggle_f5(self):
        if self.main_enable_toggle.isChecked() and self.f5_toggle.isChecked():
            self.f5_toggle.setStyleSheet("background-color: #FF0000;")
        if self.main_enable_toggle.isChecked() and not self.f5_toggle.isChecked():
            self.f5_toggle.setStyleSheet("background-color: #990000;")

    def sound_thread(self, formant):
        for i in range(1,13):
            formant = np.append(formant, formant)

        formant = signal.lfilter(lpf,1,formant)
        # play the formant
        sd.play(formant, Fs)

    #######################################
    #
    # Do this at each new impulse
    #
    #######################################
    def generateFOFlets(self):
        #######################################
        # reset impulse timer for next impulse
        #######################################
        self.timeout = int(1000/self.Impulse_Slider.value())
        self.timer.start(self.timeout)

        #######################################
        # capture all of the foflet Parameters
        #######################################
        kq_mul = 0.00005
        foflet1.set_Fc(self.f1_fc.value())
        foflet1.set_k1(self.f1_k1.value()*kq_mul)
        foflet1.set_BW(self.f1_bw.value())

        foflet2.set_Fc(self.f2_fc.value())
        foflet2.set_k1(self.f2_k1.value()*kq_mul)
        foflet2.set_BW(self.f2_bw.value())

        foflet3.set_Fc(self.f3_fc.value())
        foflet3.set_k1(self.f3_k1.value()*kq_mul)
        foflet3.set_BW(self.f3_bw.value())

        foflet4.set_Fc(self.f4_fc.value())
        foflet4.set_k1(self.f4_k1.value()*kq_mul)
        foflet4.set_BW(self.f4_bw.value())

        foflet5.set_Fc(self.f5_fc.value())
        foflet5.set_k1(self.f5_k1.value()*kq_mul)
        foflet5.set_BW(self.f5_bw.value())

        #######################################
        # create FOFlets
        #######################################
        foflet1.update_FOFlet(Fs, self.Impulse_Slider.value())
        foflet2.update_FOFlet(Fs, self.Impulse_Slider.value())
        foflet3.update_FOFlet(Fs, self.Impulse_Slider.value())
        foflet4.update_FOFlet(Fs, self.Impulse_Slider.value())
        foflet5.update_FOFlet(Fs, self.Impulse_Slider.value())
        if not self.f1_toggle.isChecked():
            foflet1.FOFlet = foflet1.FOFlet * 0
        if not self.f2_toggle.isChecked():
            foflet2.FOFlet = foflet2.FOFlet * 0
        if not self.f3_toggle.isChecked():
            foflet3.FOFlet = foflet3.FOFlet * 0
        if not self.f4_toggle.isChecked():
            foflet4.FOFlet = foflet4.FOFlet * 0
        if not self.f5_toggle.isChecked():
            foflet5.FOFlet = foflet5.FOFlet * 0

        vol = self.Volume_Slider.value()/100
        # Create complex formant from FOFlets
        formant = (foflet1.FOFlet + foflet2.FOFlet + foflet3.FOFlet + foflet4.FOFlet + foflet5.FOFlet)
        # normalize the formant
        formant = formant/np.max(np.abs(formant) + .00001) * vol

        if not self.main_enable_toggle.isChecked():
            formant = formant*0

        self.infoBox.clear()
        self.infoBox.insertPlainText(foflet_str(foflet1, foflet2, foflet3, foflet4, foflet5))

        # clear plots to make room for new data
        self.temporalPlot.clear()
        self.spectralPlot.clear()
        # plot time-domain signal
        self.temporalPlot.setXRange(0, Fs/self.Impulse_Slider.value())
        self.temporalPlot.plot(formant)
        # f, spec_plot = signal.periodogram(formant,
        #                             Fs, scaling='spectrum',
        #                             return_onesided=True,
        #                             nfft = 1024 )
        # self.spectralPlot.setXRange(0, 6000)
        # self.spectralPlot.plot(f, spec_plot)

        f, spec_plot = signal.periodogram(formant,
                                    Fs, scaling='spectrum',
                                    return_onesided=True,
                                    nfft = 1024 )
        self.spectralPlot.plot(f, spec_plot)
        #x = threading.Thread(target=self.sound_thread,
        #                     args=(formant,))
        #x.start()
        self.sound_thread(formant)

#############################################
# this will be main.
#############################################
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('qt5ct-style')
    window = Ui()
    app.exec_()
